// Mocks generated by Mockito 5.3.2 from annotations
// in canvas_equation_solver_mobile_app/test/providers/user_input_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i10;

import 'package:canvas_equation_solver_mobile_app/calculator/calculator.dart'
    as _i12;
import 'package:canvas_equation_solver_mobile_app/calculator/expression_validator.dart'
    as _i7;
import 'package:canvas_equation_solver_mobile_app/math_symbol_creator/models/math_symbol.dart'
    as _i13;
import 'package:canvas_equation_solver_mobile_app/math_symbol_creator/services/math_symbol_creator.dart'
    as _i14;
import 'package:canvas_equation_solver_mobile_app/tflite/classifiers/math_symbol_classifier.dart'
    as _i8;
import 'package:canvas_equation_solver_mobile_app/tflite/models/symbol_prediction_details.dart'
    as _i3;
import 'package:flutter/foundation.dart' as _i6;
import 'package:flutter/src/widgets/basic.dart' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:flutter/src/widgets/image.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tflite_flutter/tflite_flutter.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInterpreter_0 extends _i1.SmartFake implements _i2.Interpreter {
  _FakeInterpreter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSymbolPredictionDetails_1 extends _i1.SmartFake
    implements _i3.SymbolPredictionDetails {
  _FakeSymbolPredictionDetails_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImageProvider_2<T extends Object> extends _i1.SmartFake
    implements _i4.ImageProvider<T> {
  _FakeImageProvider_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAlignmentGeometry_3 extends _i1.SmartFake
    implements _i4.AlignmentGeometry {
  _FakeAlignmentGeometry_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeState_4<T extends _i5.StatefulWidget> extends _i1.SmartFake
    implements _i5.State<T> {
  _FakeState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatefulElement_5 extends _i1.SmartFake
    implements _i5.StatefulElement {
  _FakeStatefulElement_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_6 extends _i1.SmartFake
    implements _i6.DiagnosticsNode {
  _FakeDiagnosticsNode_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i6.TextTreeConfiguration? parentConfiguration,
    _i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeExpressionValidator_7 extends _i1.SmartFake
    implements _i7.ExpressionValidator {
  _FakeExpressionValidator_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MathSymbolClassifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockMathSymbolClassifier extends _i1.Mock
    implements _i8.MathSymbolClassifier {
  MockMathSymbolClassifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Interpreter get interpreter => (super.noSuchMethod(
        Invocation.getter(#interpreter),
        returnValue: _FakeInterpreter_0(
          this,
          Invocation.getter(#interpreter),
        ),
      ) as _i2.Interpreter);
  @override
  _i9.Future<_i3.SymbolPredictionDetails> classify(_i10.Image? image) =>
      (super.noSuchMethod(
        Invocation.method(
          #classify,
          [image],
        ),
        returnValue: _i9.Future<_i3.SymbolPredictionDetails>.value(
            _FakeSymbolPredictionDetails_1(
          this,
          Invocation.method(
            #classify,
            [image],
          ),
        )),
      ) as _i9.Future<_i3.SymbolPredictionDetails>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Image].
///
/// See the documentation for Mockito's code generation for more information.
class MockImage extends _i1.Mock implements _i11.Image {
  MockImage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ImageProvider<Object> get image => (super.noSuchMethod(
        Invocation.getter(#image),
        returnValue: _FakeImageProvider_2<Object>(
          this,
          Invocation.getter(#image),
        ),
      ) as _i4.ImageProvider<Object>);
  @override
  _i10.FilterQuality get filterQuality => (super.noSuchMethod(
        Invocation.getter(#filterQuality),
        returnValue: _i10.FilterQuality.none,
      ) as _i10.FilterQuality);
  @override
  _i4.AlignmentGeometry get alignment => (super.noSuchMethod(
        Invocation.getter(#alignment),
        returnValue: _FakeAlignmentGeometry_3(
          this,
          Invocation.getter(#alignment),
        ),
      ) as _i4.AlignmentGeometry);
  @override
  _i4.ImageRepeat get repeat => (super.noSuchMethod(
        Invocation.getter(#repeat),
        returnValue: _i4.ImageRepeat.repeat,
      ) as _i4.ImageRepeat);
  @override
  bool get matchTextDirection => (super.noSuchMethod(
        Invocation.getter(#matchTextDirection),
        returnValue: false,
      ) as bool);
  @override
  bool get gaplessPlayback => (super.noSuchMethod(
        Invocation.getter(#gaplessPlayback),
        returnValue: false,
      ) as bool);
  @override
  bool get excludeFromSemantics => (super.noSuchMethod(
        Invocation.getter(#excludeFromSemantics),
        returnValue: false,
      ) as bool);
  @override
  bool get isAntiAlias => (super.noSuchMethod(
        Invocation.getter(#isAntiAlias),
        returnValue: false,
      ) as bool);
  @override
  _i5.State<_i11.Image> createState() => (super.noSuchMethod(
        Invocation.method(
          #createState,
          [],
        ),
        returnValue: _FakeState_4<_i11.Image>(
          this,
          Invocation.method(
            #createState,
            [],
          ),
        ),
      ) as _i5.State<_i11.Image>);
  @override
  void debugFillProperties(_i6.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.StatefulElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeStatefulElement_5(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i5.StatefulElement);
  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  String toStringShallow({
    String? joiner = r', ',
    _i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  _i6.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i6.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_6(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i6.DiagnosticsNode);
  @override
  List<_i6.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i6.DiagnosticsNode>[],
      ) as List<_i6.DiagnosticsNode>);
  @override
  String toString({_i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [Calculator].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalculator extends _i1.Mock implements _i12.Calculator {
  MockCalculator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String> get digits => (super.noSuchMethod(
        Invocation.getter(#digits),
        returnValue: <String>[],
      ) as List<String>);
  @override
  set digits(List<String>? _digits) => super.noSuchMethod(
        Invocation.setter(
          #digits,
          _digits,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.ExpressionValidator get expressionValidator => (super.noSuchMethod(
        Invocation.getter(#expressionValidator),
        returnValue: _FakeExpressionValidator_7(
          this,
          Invocation.getter(#expressionValidator),
        ),
      ) as _i7.ExpressionValidator);
  @override
  set expressionValidator(_i7.ExpressionValidator? _expressionValidator) =>
      super.noSuchMethod(
        Invocation.setter(
          #expressionValidator,
          _expressionValidator,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double calculate(List<_i13.MathSymbol>? operationElements) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculate,
          [operationElements],
        ),
        returnValue: 0.0,
      ) as double);
}

/// A class which mocks [MathSymbolCreator].
///
/// See the documentation for Mockito's code generation for more information.
class MockMathSymbolCreator extends _i1.Mock implements _i14.MathSymbolCreator {
  MockMathSymbolCreator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i13.MathSymbol> recogniseSymbol(_i10.Image? drawnSymbol) =>
      (super.noSuchMethod(
        Invocation.method(
          #recogniseSymbol,
          [drawnSymbol],
        ),
        returnValue: _i9.Future<_i13.MathSymbol>.value(_i13.MathSymbol.zero),
      ) as _i9.Future<_i13.MathSymbol>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
